Input: [5, 1] * 50000

----- Running all packing algorithms on input size 100000
Total weight is 300000 and capacity per-bin is 10, so an optimal solution would use at least 30000 bins
Packing using next_fit
Took 0.1533s
Used 50000 bins compared to an optimal 30000
next_fit approx ratio for this instance is 1.666667
Packing using first_fit
Took 5.9382s
Used 30000 bins compared to an optimal 30000
first_fit approx ratio for this instance is 1.0
Packing using best_fit
Took 8.955s
Used 30000 bins compared to an optimal 30000
best_fit approx ratio for this instance is 1.0

Input: [50, 1] * 50000

----- Running all packing algorithms on input size 100000
Total weight is 2550000 and capacity per-bin is 100, so an optimal solution would use at least 25500 bins
Packing using next_fit
Took 0.1519s
Used 50000 bins compared to an optimal 25500
next_fit approx ratio for this instance is 1.960784
Packing using first_fit
Took 5.9684s
Used 25500 bins compared to an optimal 25500
first_fit approx ratio for this instance is 1.0
Packing using best_fit
Took 35.3708s
Used 25500 bins compared to an optimal 25500
best_fit approx ratio for this instance is 1.0

Input: [15] * 33333 + [34] * 33333 + [52] * 33333   # (Note: They sum to 101)
Total weight is 3366633 and capacity per-bin is 100, so an optimal solution would use at least 33667 bins
Packing using next_fit
Took 0.1508s
Used 55555 bins compared to an optimal 33667
next_fit approx ratio for this instance is 1.650132
Packing using first_fit
Took 6.7038s
Used 58333 bins compared to an optimal 33667
first_fit approx ratio for this instance is 1.732646
Packing using best_fit
Took 36.9804s
Used 38889 bins compared to an optimal 33667
best_fit approx ratio for this instance is 1.155107

FF results in 3 distinct bin sets - a set of bins containing one 52, a set of bins each containing 2 34s, and a set of bins each containing 4 15s.
BF results in two sets - (52, 34), (15 * 6), plus a leftover bin containing 4 15s.


Improved to now use floating point, which demonstrates an even starker difference between ff and bf
input: [1/7 + 0.001] * onethird + [1/3 + 0.001] * onethird + [1/2 + 0.001] * onethird

----- Running all packing algorithms on input size 100002
Total weight is 32640.33533335622 and capacity per-bin is 1, so an optimal solution would use at least 32641 bins
Packing using next_fit
Took 0.1619s
Used 55556 bins compared to an optimal 32641
next_fit approx ratio for this instance is 1.702031
Packing using first_fit
Took 6.8019s
Used 58334 bins compared to an optimal 32641
first_fit approx ratio for this instance is 1.787139
Packing using best_fit
Took 9.2412s
Used 33335 bins compared to an optimal 32641
best_fit approx ratio for this instance is 1.021262
